# 拒绝采样：如果生成的随机数满足要求，则返回该随机数，否则会不断生成，直到生成一个满足要求的随机数为止
# 1. rand7()：生成1-7的随机整数，每个数的概率为1/7
# 2. rand10()：生成1-10的随机整数，每个数的概率为1/10

# 思路：通过多次调用rand7()扩大随机范围，再从中筛选出1-10的有效部分
# 1. 生成1-49的均匀随机数，调用两次rand7()，第一次结果记录为a，第二次结果记录为b，构造新的数num = (a-1)x7+b
# 此时num的范围是1-49，并且每个数的概率为1/49
# 2. 筛选出1-40的有效范围：如果num>40则丢弃该结果，重新生成（因为49不是10的倍数，41-49无法平均分配到1-10）
# 3. 映射1-10:对1-40的num做取余的操作：result = (num-1)%10+1

# 时间复杂度：O(1)
# 空间复杂度：O(1)
class Solution:
    def rand10(self):
        """
        :rtype: int
        """
        a = rand7()
        b = rand7()
        num = (a-1)*7+b # 范围1-49
        # 只保留1-40，确保平均分配到1-10
        if num<=40:
            # 映射到1-10
            return (num-1)%10+1